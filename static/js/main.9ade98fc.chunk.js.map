{"version":3,"sources":["App.module.css","Components/Counter.module.css","Display/Display.module.css","Components/Reusable_components/Button/Button.module.css","Components/Settings/Settings.module.css","Components/Reusable_components/Button/Button.jsx","Display/Display.jsx","Components/Settings/Settings.jsx","Components/Counter.jsx","App.jsx","serviceWorker.js","index.js"],"names":["module","exports","Button","state","error","className","this","style","onClick","props","onBtnClick","disabled","name","React","Component","Display","titleInc","titleRes","render","outputValue","incrementCounter","incrDisable","resetCounter","resetDisable","Settings","setTitle","onSetMaxValue","e","valueMax","currentTarget","value","setMaxValue","onSetStartValue","valueStart","setStartValue","Wrap","errorMax","maxValue","onChange","type","errorStart","startValue","setValue","setDisable","Counter","startValueStorage","maxValueStorage","saveState","stateToString","JSON","stringify","localStorage","setItem","restoreState","outputVariable","getItem","parse","setState","Number","App","Boolean","window","location","hostname","match","ReactDOM","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","console","message"],"mappings":"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","file":"static/js/main.9ade98fc.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"Wrap\":\"App_Wrap__3_SMe\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Wrap\":\"Counter_Wrap__5HG0h\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Display\":\"Display_Display__gKNOu\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Button\":\"Button_Button__3xhJ1\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Wrap\":\"Settings_Wrap__1Tkpt\",\"error\":\"Settings_error__46pUt\"};","import React from 'react';\r\nimport style from './Button.module.css'\r\n\r\nclass Button extends React.Component {\r\nstate={\r\nerror:false\r\n}\r\n\r\n    render() {\r\n        return (\r\n\r\n            <button className={this.state.error ? style.error : ''}\r\n\r\n                    onClick={this.props.onBtnClick} disabled={this.props.disabled}>{this.props.name}</button>\r\n\r\n        )\r\n    }\r\n}\r\n\r\nexport default Button;","import React from 'react';\r\nimport style from './Display.module.css';\r\nimport Button from './../Components/Reusable_components/Button/Button'\r\n\r\n\r\nclass Display extends React.Component {\r\n    state = {\r\n        titleInc: 'inc',\r\n        titleRes: 'res'\r\n    }\r\n    render = () => {\r\n\r\n        return (\r\n            <div className={style.Display}>\r\n\r\n                <span> {this.props.outputValue}</span>\r\n                <Button name={this.state.titleInc} onBtnClick={this.props.incrementCounter} disabled={this.props.incrDisable}/>\r\n                <Button name={this.state.titleRes} onBtnClick={this.props.resetCounter} disabled={this.props.resetDisable}/>\r\n\r\n            </div>\r\n        );\r\n    };\r\n}\r\n\r\n\r\nexport default Display;\r\n\r\n\r\n{/*  <Increment IncrementCounter={this.props.IncrementCounter} counterDisable={this.props.counterDisable}/>\r\n                <Reset ResetCounter={this.props.ResetCounter} resetDisable={this.props.resetDisable}/>*/\r\n}","import React from 'react';\r\nimport style from './Settings.module.css';\r\nimport Button from './../Reusable_components/Button/Button'\r\n\r\n\r\nclass Settings extends React.Component {\r\n    state = {\r\n        setTitle: 'set'\r\n\r\n};\r\n\r\nonSetMaxValue = (e) => {\r\n    debugger\r\n    let valueMax = e.currentTarget.value;\r\n    this.props.setMaxValue(valueMax);\r\n};\r\nonSetStartValue = (e) => {\r\n    let valueStart = e.currentTarget.value;\r\n    this.props.setStartValue(valueStart);\r\n\r\n};\r\n\r\nrender = () => {\r\n    return (\r\n        <div className={style.Wrap}>\r\n            <span> MaxValue:<input className={this.props.errorMax ? 'error' : ''}\r\n                                   value={this.props.maxValue}\r\n                                   onChange={this.onSetMaxValue}\r\n                                   type='number'\r\n            /></span>\r\n            <span>StartValue:<input\r\n                className={this.props.errorStart ? 'error' : ''}\r\n                                    value={this.props.startValue}\r\n                                    onChange={this.onSetStartValue}\r\n                                     type='number'\r\n            /></span>\r\n\r\n            <Button name={this.state.setTitle} onBtnClick={this.props.setValue} disabled={this.props.setDisable}/>\r\n\r\n        </div>\r\n    );\r\n};\r\n}\r\n\r\n\r\nexport default Settings;","import React from 'react';\r\nimport style from './Counter.module.css';\r\nimport Display from '../Display/Display';\r\nimport Settings from './Settings/Settings';\r\n\r\n// import {saveState, restoreState} from './../OutsideComponents/LocalStorage'\r\n\r\nclass Counter extends React.Component {\r\n\r\n    state = {\r\n        resetDisable: true,\r\n        incrDisable: true,\r\n        setDisable: true,\r\n        startValue: 0,\r\n        maxValue: 0,\r\n        outputValue: 0,\r\n        startValueStorage: 0,\r\n        maxValueStorage: 0\r\n        /*errorStart: false,\r\n        errorMax: false*/\r\n\r\n        /* Buttons = {\"set\":{title: 'set',statusButtonSet:true},\r\n        'inc':{ title: 'inc',statusButton:false},\r\n      'res':{ title: 'res',statusButton:false}}*/\r\n\r\n    };\r\n\r\n\r\n    componentDidMount() {\r\n        this.restoreState();\r\n    }\r\n\r\n\r\n    saveState = () => {\r\n        let stateToString = JSON.stringify(this.state);\r\n        localStorage.setItem('defaultState', stateToString);\r\n    };\r\n\r\n    restoreState = () => {\r\n        let state = {\r\n            resetDisable: true,\r\n            incrDisable: true,\r\n            setDisable: true,\r\n            outputVariable: 0,\r\n            startValue: 0,\r\n            maxValue: 0,\r\n            startValueStorage: 0,\r\n            maxValueStorage: 0\r\n        };\r\n        let stateToString = localStorage.getItem('defaultState');\r\n        if (stateToString !== null) {\r\n            state = JSON.parse(stateToString);\r\n\r\n        }\r\n        this.setState(state);\r\n    };\r\n\r\n\r\n    setMaxValue = (valueMax) => {\r\n        this.setState({\r\n            maxValue: valueMax,\r\n            outputValue: 'input value and press \"set\"',\r\n            setDisable: false\r\n        }, () => this.saveState())\r\n    };\r\n\r\n    setStartValue = (valueStart) => {\r\n        this.setState({\r\n            startValue: valueStart,\r\n            outputValue: 'input value and press \"set\"',\r\n            setDisable: false\r\n        }, () => this.saveState())\r\n    };\r\n\r\n    setValue = () => {\r\n        this.setState({\r\n            startValueStorage: this.state.startValue,\r\n            maxValueStorage: this.state.maxValue,\r\n            outputValue: this.state.startValueStorage,\r\n            setDisable: true,\r\n            resetDisable: false,\r\n            incrDisable: false\r\n        })\r\n    };\r\n\r\n    incrementCounter = () => {\r\n        if (this.state.startValueStorage < this.state.maxValueStorage) {\r\n            this.setState({\r\n                    startValueStorage: Number(this.state.startValueStorage) + 1,\r\n\r\n\r\n                },\r\n                () => {\r\n                    this.saveState();\r\n                    if (this.state.startValueStorage === this.state.maxValueStorage) {\r\n                        this.setState({\r\n                            outputValue: this.state.startValueStorage\r\n\r\n\r\n                        })\r\n                    }\r\n\r\n                })\r\n        } else {\r\n            this.setState({\r\n                    incrDisable: true,\r\n                    outputValue: this.state.startValueStorage,\r\n                /*    startValueStorage: this.state.startValue*/\r\n                },\r\n                () => this.saveState())\r\n        }\r\n    };\r\n    resetCounter = () => {\r\n        this.setState({\r\n                incrDisable: false,\r\n                outputValue: this.state.startValueStorage\r\n            },\r\n            () => this.saveState());\r\n\r\n\r\n    };\r\n\r\n\r\n    render() {\r\n\r\n\r\n        return (\r\n            <div className={style.Wrap}>\r\n\r\n                <Display\r\n                    outputValue={this.state.outputValue}\r\n                    setValue={this.setValue}\r\n                    incrementCounter={this.incrementCounter}\r\n                    resetDisable={this.state.resetDisable} incrDisable={this.state.incrDisable}\r\n                    resetCounter={this.resetCounter}/>\r\n                <Settings startValue={this.state.startValue}\r\n                          maxValue={this.state.maxValue}\r\n                          setValue={this.setValue}\r\n                          setMaxValue={this.setMaxValue}\r\n                          setStartValue={this.setStartValue}\r\n                          errorStart={this.state.errorStart} errorMax={this.state.errorMax}\r\n                          setDisable={this.props.setDisable}/>\r\n            </div>\r\n        );\r\n    };\r\n}\r\n\r\nexport default Counter;","import React from 'react';\r\nimport style from './App.module.css'\r\n\r\nimport Counter from './Components/Counter';\r\n\r\nclass App extends React.Component {\r\n    render() {\r\n        return (\r\n            <div className={style.Wrap}>\r\n\r\n                <Counter/>\r\n\r\n\r\n            </div>\r\n\r\n        )\r\n    }\r\n\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' }\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}