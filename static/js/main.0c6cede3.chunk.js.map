{"version":3,"sources":["Components/Settings/Settings.module.css","Components/Status/Status.module.css","App.module.css","Components/Counter.module.css","Display/Display.module.css","Components/Reusable_components/Button/Button.module.css","Components/Reusable_components/Button/Button.jsx","Components/Status/Status.jsx","Display/Display.jsx","Components/Settings/Settings.jsx","Components/Counter.jsx","App.jsx","serviceWorker.js","index.js"],"names":["module","exports","Button","props","className","this","errorButton","style","error","onClick","onBtnClick","disabled","name","React","Component","Status","render","statusOutput","OutputScreen","outputValue","Display","state","titleInc","titleRes","incrementCounter","incrDisable","resetCounter","resetDisable","Settings","setTitle","onSetMaxValue","e","valueMax","currentTarget","value","setMaxValue","onSetStartValue","valueStart","setStartValue","Wrap","errorMax","maxValue","onChange","type","errorStart","startValue","setValue","setDisable","Counter","saveState","stateToString","JSON","stringify","localStorage","setItem","restoreState","getItem","parse","setState","checkValue","Number","App","Boolean","window","location","hostname","match","ReactDOM","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","console","message"],"mappings":"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","file":"static/js/main.0c6cede3.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"Wrap\":\"Settings_Wrap__1Tkpt\",\"error\":\"Settings_error__46pUt\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"OutputScreen\":\"Status_OutputScreen__3frf_\",\"textOutput\":\"Status_textOutput__1VKs0\",\"max\":\"Status_max__2cYl3\",\"error\":\"Status_error__1DsCv\",\"outputPermissible\":\"Status_outputPermissible__elYDu\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Wrap\":\"App_Wrap__3_SMe\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Wrap\":\"Counter_Wrap__5HG0h\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Display\":\"Display_Display__gKNOu\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Button\":\"Button_Button__3xhJ1\",\"error\":\"Button_error__3KNKV\"};","import React from 'react';\r\nimport style from './Button.module.css'\r\nimport Display from \"../../../Display/Display\";\r\n\r\nclass Button extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n    }\r\n\r\n    render() {\r\n        return (\r\n\r\n            <button className={this.props.errorButton ? style.error : ''}\r\n                    onClick={this.props.onBtnClick} disabled={this.props.disabled}>\r\n                    {this.props.name} </button>\r\n\r\n        )\r\n    }\r\n}\r\n\r\nexport default Button;","import React from 'react';\r\nimport style from './Status.module.css'\r\n\r\nclass Status extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n    }\r\n\r\n\r\n    render = () => {\r\n        const className = this.props.statusOutput\r\n        // let statusClass = this.props.statusOutput === 'textOutput' ? textOutput :\r\n        //     this.props.statusOutput === 'max' ? style.outputMaxValue :\r\n        //         this.props.statusOutput === 'error' ? style.outputError : '';\r\n        debugger\r\n        return (\r\n            <div className={style.OutputScreen}>\r\n                <div className={style[this.props.statusOutput]}>{this.props.outputValue}</div>\r\n            </div>\r\n\r\n        )\r\n    }\r\n}\r\n\r\nexport default Status;","import React from 'react';\r\nimport style from './Display.module.css';\r\nimport Button from './../Components/Reusable_components/Button/Button'\r\nimport Status from \"../Components/Status/Status\";\r\n\r\n\r\nclass Display extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n    }\r\n\r\n    state = {\r\n\r\n        titleInc: 'inc',\r\n        titleRes: 'res'\r\n    };\r\n    render = () => {\r\n\r\n        return (\r\n            <div className={style.Display}>\r\n                <Status statusOutput={this.props.statusOutput} outputValue={this.props.outputValue}/>\r\n                <Button name={this.state.titleInc} onBtnClick={this.props.incrementCounter}\r\n                        disabled={this.props.incrDisable} errorButton={this.props.errorButton}/>\r\n                <Button name={this.state.titleRes} onBtnClick={this.props.resetCounter}\r\n                        disabled={this.props.resetDisable} errorButton={this.props.errorButton}/>\r\n\r\n            </div>\r\n        );\r\n    };\r\n}\r\n\r\n\r\nexport default Display;\r\n\r\n\r\n{/*  <Increment IncrementCounter={this.props.IncrementCounter} counterDisable={this.props.counterDisable}/>\r\n                <Reset ResetCounter={this.props.ResetCounter} resetDisable={this.props.resetDisable}/>*/\r\n}","import React from 'react';\r\nimport style from './Settings.module.css';\r\nimport Button from './../Reusable_components/Button/Button'\r\nimport Display from \"../../Display/Display\";\r\n\r\n\r\nclass Settings extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n    }\r\n    state = {\r\n        setTitle: 'set'\r\n\r\n    };\r\n\r\n    onSetMaxValue = (e) => {\r\n        let valueMax = e.currentTarget.value;\r\n        this.props.setMaxValue(valueMax);\r\n\r\n    };\r\n    onSetStartValue = (e) => {\r\n        let valueStart = e.currentTarget.value;\r\n        this.props.setStartValue(valueStart);\r\n\r\n    };\r\n\r\n    render = () => {\r\ndebugger\r\n        return (\r\n            <div className={style.Wrap}>\r\n            <span> MaxValue:<input\r\n                className={this.props.errorMax ? style.error : ''}\r\n                value={this.props.maxValue}\r\n                onChange={this.onSetMaxValue}\r\n                type='number'\r\n            /></span>\r\n                <span>StartValue:<input\r\n                    className={this.props.errorStart ? style.error : ''}\r\n                    value={this.props.startValue}\r\n                    onChange={this.onSetStartValue}\r\n                    type='number'\r\n                /></span>\r\n\r\n                <Button name={this.state.setTitle} onBtnClick={this.props.setValue} disabled={this.props.setDisable}\r\n                        errorButton={this.props.errorButton}/>\r\n\r\n            </div>\r\n        );\r\n    };\r\n}\r\n\r\n\r\nexport default Settings;","import React from 'react';\r\nimport style from './Counter.module.css';\r\nimport Display from '../Display/Display';\r\nimport Settings from './Settings/Settings';\r\n\r\n// import {saveState, restoreState} from './../OutsideComponents/LocalStorage'\r\n\r\nclass Counter extends React.Component {\r\n\r\n    state = {\r\n        resetDisable: true,\r\n        incrDisable: true,\r\n        setDisable: false,\r\n        startValue: 0,\r\n        maxValue: 0,\r\n        outputValue: 0,\r\n        errorStart: false,\r\n        errorMax: false,\r\n        errorButton: false,\r\n        statusOutput: 'textOutput'\r\n\r\n        /* Buttons = {\"set\":{title: 'set',statusButtonSet:true},\r\n        'inc':{ title: 'inc',statusButton:false},\r\n      'res':{ title: 'res',statusButton:false}}*/\r\n\r\n    };\r\n\r\n\r\n    componentDidMount() {\r\n          this.restoreState();\r\n    }\r\n\r\n\r\n    saveState = () => {\r\n        let stateToString = JSON.stringify(this.state);\r\n        localStorage.setItem('defaultState', stateToString);\r\n    };\r\n\r\n    restoreState = () => {\r\n        let state = {\r\n            resetDisable: true,\r\n        incrDisable: true,\r\n        setDisable: false,\r\n        startValue: 0,\r\n        maxValue: 0,\r\n        outputValue: 0,\r\n        errorStart: false,\r\n        errorMax: false,\r\n        errorButton: false,\r\n        statusOutput: 'textOutput'\r\n        };\r\n        let stateToString = localStorage.getItem('defaultState');\r\n        if (stateToString !== null) {\r\n            state = JSON.parse(stateToString);\r\n\r\n        }\r\n        this.setState(state);\r\n    };\r\n\r\n    /*checkStartValue = () => {\r\n        if (this.state.startValue === this.state.maxValue || this.state.startValue < 0 || this.state.startValue > this.state.maxValue) {\r\n            this.setState({\r\n                    outputValue: 'Incorrect value',\r\n                    resetDisable: true,\r\n                    incrDisable: true,\r\n                    setDisable: true,\r\n                    errorMax: true,\r\n                    errorButton: true,\r\n                    errorStart: true,\r\n                    statusOutput: 'error'\r\n                },() => this.saveState())\r\n\r\n        } else {\r\n            this.setState({\r\n                outputValue: 'input value and press \"set\"',\r\n                errorMax: false,\r\n                errorStart: false,\r\n                errorButton: false,\r\n                setDisable: false,\r\n                statusOutput: 'textOutput'\r\n            },() => this.saveState())\r\n        }\r\n    };\r\n*/\r\n\r\n    checkValue = () => {\r\n        if (this.state.startValue === this.state.maxValue ||\r\n            this.state.maxValue < 0 ||\r\n            this.state.startValue < 0||\r\n            this.state.startValue > this.state.maxValue) {\r\n            this.setState({\r\n                    outputValue: 'Incorrect value',\r\n                    resetDisable: true,\r\n                    incrDisable: true,\r\n                    setDisable: true,\r\n                    errorStart: true,\r\n                    errorMax: true,\r\n                    errorButton: true,\r\n                statusOutput: 'error'\r\n\r\n                },() => this.saveState())\r\n        } else {\r\n            this.setState({\r\n                outputValue: 'input value and press \"set\"',\r\n                errorMax: false,\r\n                errorStart: false,\r\n                errorButton: false,\r\n                setDisable: false,\r\n                statusOutput: 'textOutput'\r\n            },() => this.saveState())\r\n        }\r\n    };\r\n\r\n\r\n    setMaxValue = (valueMax) => {\r\n        this.setState({\r\n            maxValue: valueMax,\r\n\r\n\r\n        }, () => this.checkValue(this.state.maxValue))\r\n    };\r\n\r\n    setStartValue = (valueStart) => {\r\n        this.setState({\r\n            startValue: valueStart,\r\n            outputValue: 'input value and press \"set\"',\r\n            setDisable: false,\r\n            statusOutput: 'textOutput'\r\n        }, () => this.checkValue(this.state.startValue)\r\n        )\r\n    };\r\n\r\n    setValue = () => {\r\n        this.setState({\r\n            outputValue: this.state.startValue,\r\n            setDisable: true,\r\n            resetDisable: false,\r\n            incrDisable: false,\r\n            statusOutput: 'textOutput'\r\n        }, () => this.saveState())\r\n    };\r\n\r\n    incrementCounter = () => {\r\n        this.setState({outputValue: Number(this.state.outputValue) + 1}, () => {\r\n            if (this.state.outputValue < this.state.maxValue) {\r\n                this.setState({\r\n                    incrDisable: false,\r\n                    statusOutput: 'textOutput'\r\n                },() => this.saveState())\r\n\r\n            } else {\r\n                this.setState({incrDisable: true, statusOutput: 'max'}, () => this.saveState())\r\n            }\r\n        })\r\n    };\r\n\r\n    resetCounter = () => {\r\n        this.setState({\r\n                incrDisable: false,\r\n                outputValue: this.state.outputValue,\r\n                statusOutput: 'textOutput'\r\n            },\r\n            () => this.saveState());\r\n\r\n\r\n    };\r\n\r\n\r\n    render() {\r\n\r\n\r\n        return (\r\n            <div className={style.Wrap}>\r\n\r\n\r\n                <Settings\r\n                    errorButton={this.state.errorButton}\r\n                    startValue={this.state.startValue}\r\n                    maxValue={this.state.maxValue}\r\n                    setValue={this.setValue}\r\n                    setMaxValue={this.setMaxValue}\r\n                    setStartValue={this.setStartValue}\r\n                    errorStart={this.state.errorStart}\r\n                    errorMax={this.state.errorMax}\r\n                    setDisable={this.state.setDisable}/>\r\n\r\n                <Display\r\n                    errorButton={this.state.errorButton}\r\n                    outputValue={this.state.outputValue}\r\n                    setValue={this.setValue}\r\n                    incrementCounter={this.incrementCounter}\r\n                    resetDisable={this.state.resetDisable}\r\n                    incrDisable={this.state.incrDisable}\r\n                    resetCounter={this.resetCounter}\r\n                    statusOutput={this.state.statusOutput}\r\n                />\r\n\r\n            </div>\r\n        );\r\n    };\r\n}\r\n\r\nexport default Counter;\r\n\r\n/*\r\n    setMaxValue = (valueMax) => {\r\n      /!*  if (this.state.startValue < valueMax || valueMax > 0) {*!/\r\n            this.setState({\r\n                maxValue: valueMax,\r\n                outputValue: 'input value and press \"set\"',\r\n                setDisable: false,\r\n                errorMax: false,\r\n                errorButton: false\r\n            }, () => this.saveState())\r\n        } else {\r\n            this.setState({\r\n                    outputValue: 'Incorrect value',\r\n                    resetDisable: true,\r\n                    incrDisable: true,\r\n                    setDisable: true,\r\n                    errorMax: true,\r\n                    errorButton: true\r\n                }\r\n            )\r\n        }\r\n    };\r\n\r\n    setStartValue = (valueStart) => {\r\n        if (valueStart < this.state.maxValue || valueStart > 0) {\r\n            this.setState({\r\n                startValue: valueStart,\r\n                outputValue: 'input value and press \"set\"',\r\n                setDisable: false,\r\n                errorMax: false,\r\n                errorButton: false\r\n            }, () => this.saveState())\r\n        } else {\r\n            this.setState({\r\n                    outputValue: 'Incorrect value',\r\n                    resetDisable: true,\r\n                    incrDisable: true,\r\n                    setDisable: true,\r\n                    errorMax: true,\r\n                    errorButton: true\r\n                }\r\n            )\r\n        }\r\n    };*/","import React from 'react';\r\nimport style from './App.module.css'\r\n\r\nimport Counter from './Components/Counter';\r\n\r\nclass App extends React.Component {\r\n    render() {\r\n        return (\r\n            <div className={style.Wrap}>\r\n\r\n                <Counter/>\r\n\r\n\r\n            </div>\r\n\r\n        )\r\n    }\r\n\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' }\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}