{"version":3,"sources":["Counter/Counter.module.css","Counter/Increment/Increment.module.css","Counter/Reset/Reset.module.css","Counter/Increment/Increment.jsx","Counter/Reset/Reset.jsx","Counter/Counter.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Increment","render","className","style","onClick","props","IncrementCounter","disabled","counterDisable","React","Component","Reset","ResetCounter","resetDisable","Counter","counter","count","App","state","setState","Boolean","window","location","hostname","match","ReactDOM","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"0FACAA,EAAOC,QAAU,CAAC,QAAU,2B,gBCA5BD,EAAOC,QAAU,CAAC,UAAY,+B,gBCA9BD,EAAOC,QAAU,CAAC,MAAQ,uB,6NCkBXC,E,2MAddC,OAAS,WAER,OAEC,yBAAKC,UAAWC,IAAMH,WACrB,4BAAQI,QAAS,EAAKC,MAAMC,iBAAkBC,SAAU,EAAKF,MAAMG,gBAAnE,S,6BAPoBC,IAAMC,W,gBCafC,E,2MAZXV,OAAS,WAEL,OACI,yBAAKC,UAAWC,IAAMQ,OAClB,4BAAQP,QAAS,EAAKC,MAAMO,aAAcL,SAAU,EAAKF,MAAMQ,cAA/D,W,6BALIJ,IAAMC,WCiBXI,E,2MAdXb,OAAS,WAEL,OACI,yBAAKC,UAAWC,IAAMY,SAElB,kCAAQ,EAAKV,MAAMW,OACnB,kBAAC,EAAD,CAAWV,iBAAkB,EAAKD,MAAMC,iBAAkBE,eAAgB,EAAKH,MAAMG,iBACrF,kBAAC,EAAD,CAAOI,aAAc,EAAKP,MAAMO,aAAcC,aAAc,EAAKR,MAAMQ,iB,6BARjEJ,IAAMC,WCiDbO,E,2MA/CXC,MAAQ,CACJL,cAAc,EACdL,gBAAgB,EAChBQ,MAAO,G,EAIXV,iBAAmB,WACX,EAAKY,MAAMF,MAAQ,EACnB,EAAKG,SAAS,CACVH,MAAO,EAAKE,MAAMF,MAAQ,EAE1BH,cAAc,IAGU,IAArB,EAAKK,MAAMF,OAClB,EAAKG,SACD,CACIX,gBAAgB,K,EAOhCI,aAAe,WACX,EAAKO,SAAS,CAACH,MAAO,EAAGH,cAAc,EAAML,gBAAgB,K,EAMjEP,OAAS,WAGL,OACI,yBAAKC,UAAU,OAEX,kBAAC,EAAD,CAASc,MAAO,EAAKE,MAAMF,MAAOV,iBAAkB,EAAKA,iBAChDO,aAAc,EAAKK,MAAML,aAAcL,eAAgB,EAAKU,MAAMV,eAClEI,aAAc,EAAKA,iB,6BA1C1BH,IAAMC,WCOJU,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASxB,OAAO,kBAAC,EAAD,MAASyB,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.77adb35f.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"counter\":\"Counter_counter__nqF-z\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Increment\":\"Increment_Increment__1AdzQ\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Reset\":\"Reset_Reset__75aFO\"};","import React from 'react';\r\nimport style from './Increment.module.css';\r\n\r\nclass Increment extends React.Component {\r\n\r\n\trender = () => {\r\n\r\n\t\treturn (\r\n\r\n\t\t\t<div className={style.Increment}>\r\n\t\t\t\t<button onClick={this.props.IncrementCounter} disabled={this.props.counterDisable}>Inc</button>\r\n\t\t\t</div>\r\n\r\n\t\t);\r\n\t};\r\n\r\n\r\n}\r\n\r\nexport default Increment;","import React from 'react';\r\nimport style from './Reset.module.css';\r\n\r\nclass Reset extends React.Component {\r\n    render = () => {\r\n\r\n        return (\r\n            <div className={style.Reset}>\r\n                <button onClick={this.props.ResetCounter} disabled={this.props.resetDisable}>Reset</button>\r\n            </div>\r\n        );\r\n    };\r\n\r\n\r\n}\r\n\r\nexport default Reset;","import React from 'react';\r\nimport style from './Counter.module.css';\r\nimport Increment from \"./Increment/Increment\";\r\nimport Reset from \"./Reset/Reset\";\r\n\r\nclass Counter extends React.Component {\r\n    render = () => {\r\n\r\n        return (\r\n            <div className={style.counter}>\r\n\r\n                <span> {this.props.count}</span>\r\n                <Increment IncrementCounter={this.props.IncrementCounter} counterDisable={this.props.counterDisable}/>\r\n                <Reset ResetCounter={this.props.ResetCounter} resetDisable={this.props.resetDisable}/>\r\n            </div>\r\n        );\r\n    };\r\n}\r\n\r\n\r\nexport default Counter;","import React from 'react';\n\nimport './App.css';\nimport Counter from \"./Counter/Counter\";\n\nclass App extends React.Component {\n\n    state = {\n        resetDisable: true,\n        counterDisable: false,\n        count: 0\n\n    };\n\n    IncrementCounter = () => {\n        if (this.state.count < 5) {\n            this.setState({\n                count: this.state.count + 1,\n\n                resetDisable: false\n            });\n\n        } else if (this.state.count === 5) {\n            this.setState(\n                {\n                    counterDisable: true\n\n                });\n\n        }\n    };\n\n    ResetCounter = () => {\n        this.setState({count: 0, resetDisable: true, counterDisable: false});\n\n\n    };\n\n\n    render = () => {\n\n\n        return (\n            <div className=\"App\">\n\n                <Counter count={this.state.count} IncrementCounter={this.IncrementCounter}\n                         resetDisable={this.state.resetDisable} counterDisable={this.state.counterDisable}\n                         ResetCounter={this.ResetCounter}/>\n\n            </div>\n        );\n    };\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}